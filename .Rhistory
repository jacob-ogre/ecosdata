HCP_table <- bind_tables(tabs, "HCP Plan Summaries")
SHA_table <- bind_tables(tabs, "SHA Plan Summaries")
CCA_table <- bind_tables(tabs, "CCA Plan Summaries")
CCAA_table <- bind_tables(tabs, "CCAA Plan Summaries")
kable(head(species_table, 10))
TSN <- unlist(lapply(files, get_species_tsn))
TSN
files
TSN
tt <- get_petitions_table(1264)
tt
View(ECOS_dl_08Dec2016)
urls <- TECP_table$Species_Page[1:20]
dirs <- paste0(BASED, "/species/", TECP_table$Species_Code[1:20])
res <- lapply(dirs, function(x) if(!dir.exists(x)) dir.create(x, recursive = TRUE))
fils <-  file.path(dirs, paste0(TECP_table$Species_Code[1:20],
"_", Sys.Date(), ".html"))
results <- mcmapply(download_species_page,
urls, fils,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
results <- bind_rows(results)
results$species <- TECP_table$Scientific_Name[1:20]
ECOS_dl_08Dec2016 <- results
files <- ECOS_dl_08Dec2016$dest
md5s <- mclapply(files,
species_page_md5,
mc.cores = NCORE,
mc.preschedule = FALSE)
ECOS_dl_08Dec2016$MD5 <- unlist(md5s)
save(ECOS_dl_08Dec2016,
file = paste0(BASED, "/rda/ECOS_dl_08Dec2016.rda"))
kable(head(ECOS_dl_08Dec2016, 10))
tabs <- mclapply(files,
get_species_tables,
mc.cores = NCORE,
mc.preschedule = FALSE)
tab_names <- map(1:length(tabs), function(x) names(tabs[[x]])) %>%
unlist() %>% unique()
names(tabs) <- c(as.character(seq(1, length(tabs))))
species_table <- bind_tables(tabs, "SP_TAB")
fedreg_table <- bind_tables(tabs, "FR_TAB")
recovery_table <- bind_tables(tabs, "REC_TAB")
adddoc_table <- bind_tables(tabs, "DOC_TAB")
fiveyr_table <- bind_tables(tabs, "REV_TAB")
crithab_table <- bind_tables(tabs, "CH_TAB")
HCP_table <- bind_tables(tabs, "HCP Plan Summaries")
SHA_table <- bind_tables(tabs, "SHA Plan Summaries")
CCA_table <- bind_tables(tabs, "CCA Plan Summaries")
CCAA_table <- bind_tables(tabs, "CCAA Plan Summaries")
View(fedreg_table)
TSN <- unlist(lapply(files, get_species_tsn))
TSN
petitions_table <- lapply(TSN, get_petitions_table)
names(petitions_table) <- ECOS_dl_08Dec2016$species
petitions_table <- bind_rows(petitions_table)
if(dim(petitions_table)[1] > 0) kable(head(petitions_table))
co_urls <- filter(ECOS_species_links,
grepl(ECOS_species_links$link, pattern = "countiesBySpecies"))
counties_tabs <- mcmapply(get_counties,
co_urls$link, co_urls$Scientific_Name,
SIMPLIFY = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
counties_table <- bind_rows(counties_tabs)
kable(head(counties_table))
save(petitions_table,
file = file.path(BASED, "rda",
paste0("petitions_table_", Sys.Date(), ".rda")))
save(counties_table,
file = file.path(BASED, "rda",
paste0("counties_table_", Sys.Date(), ".rda")))
HCP_url <- HCP_table$Doc_Link
HCP_spp <- HCP_table$Species
HCP_data <- mcmapply(get_conservation_plan_data,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_data <- bind_rows(HCP_data)
save(HCP_data,
file = file.path(BASED, "rda",
paste0("HCP_data_", Sys.Date(), ".rda")))
View(HCP_data)
HCP_docs <- mcmapply(get_conservation_plan_doc_links,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_docs <- bind_rows(HCP_docs)
save(HCP_docs,
file = file.path(BASED, "rda",
paste0("HCP_docs_", Sys.Date(), ".rda")))
SHA_data <- mcmapply(get_conservation_plan_data,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_data <- bind_rows(SHA_data)
save(SHA_data,
file = file.path(BASED, "rda",
paste0("SHA_data_", Sys.Date(), ".rda")))
SHA_docs <- mcmapply(get_conservation_plan_doc_links,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_docs <- bind_rows(SHA_docs)
save(SHA_docs,
file = file.path(BASED, "rda",
paste0("SHA_docs_", Sys.Date(), ".rda")))
CCA_url <- CCA_table$Doc_Link
View(SHA_table)
SHA_url <- SHA_table$Doc_Link
HCP_url <- HCP_table$Doc_Link
HCP_spp <- HCP_table$Species
HCP_data <- mcmapply(get_conservation_plan_data,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_data <- bind_rows(HCP_data)
save(HCP_data,
file = file.path(BASED, "rda",
paste0("HCP_data_", Sys.Date(), ".rda")))
HCP_docs <- mcmapply(get_conservation_plan_doc_links,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_docs <- bind_rows(HCP_docs)
save(HCP_docs,
file = file.path(BASED, "rda",
paste0("HCP_docs_", Sys.Date(), ".rda")))
SHA_url <- SHA_table$Doc_Link
SHA_spp <- SHA_table$Species
SHA_data <- mcmapply(get_conservation_plan_data,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_data <- bind_rows(SHA_data)
save(SHA_data,
file = file.path(BASED, "rda",
paste0("SHA_data_", Sys.Date(), ".rda")))
SHA_docs <- mcmapply(get_conservation_plan_doc_links,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_docs <- bind_rows(SHA_docs)
save(SHA_docs,
file = file.path(BASED, "rda",
paste0("SHA_docs_", Sys.Date(), ".rda")))
CCA_url <- CCA_table$Doc_Link
CCA_spp <- CCA_table$Species
CCA_data <- mcmapply(get_conservation_plan_data,
CCA_url, CCA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCA_data <- bind_rows(CCA_data)
save(CCA_data,
file = file.path(BASED, "rda",
paste0("CCA_data_", Sys.Date(), ".rda")))
CCA_docs <- mcmapply(get_conservation_plan_doc_links,
CCA_url, CCA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCA_docs <- bind_rows(CCA_docs)
save(CCA_docs,
file = file.path(BASED, "rda",
paste0("CCA_docs_", Sys.Date(), ".rda")))
CCAA_url <- CCAA_table$Doc_Link
CCAA_spp <- CCAA_table$Species
CCAA_data <- mcmapply(get_conservation_plan_data,
CCAA_url, CCAA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCAA_data <- bind_rows(CCAA_data)
save(CCAA_data,
file = file.path(BASED, "rda",
paste0("CCAA_data_", Sys.Date(), ".rda")))
CCAA_docs <- mcmapply(get_conservation_plan_doc_links,
CCAA_url, CCAA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCAA_docs <- bind_rows(CCAA_docs)
save(CCAA_docs,
file = file.path(BASED, "rda",
paste0("CCAA_docs_", Sys.Date(), ".rda")))
rm(list=ls())
starttime <- Sys.time()
library(digest)
library(dplyr)
library(ecosdata)
library(ecosscraper)
library(knitr)
library(parallel)
library(purrr)
NCORE <- detectCores() - 1
BASED <- "~/Work/Data/ECOS"
TECP_init <- get_TECP_baseline()
TECP_table <- TECP_init$TECP_table
TECP_summary <- TECP_init$TECP_summary
save(TECP_table,
file = file.path(BASED, "rda", paste0("TECP_table", Sys.Date(), ".rda")))
save(TECP_summary,
file = file.path(BASED, "rda", paste0("TECP_summary", Sys.Date(), ".rda")))
# Download files
urls <- TECP_table$Species_Page[1:20]
dirs <- paste0(BASED, "/species/", TECP_table$Species_Code[1:20])
res <- lapply(dirs, function(x) if(!dir.exists(x)) dir.create(x, recursive = TRUE))
fils <-  file.path(dirs, paste0(TECP_table$Species_Code[1:20],
"_", Sys.Date(), ".html"))
results <- mcmapply(download_species_page,
urls, fils,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
results <- bind_rows(results)
results$species <- TECP_table$Scientific_Name[1:20]
ECOS_dl_08Dec2016 <- results
# MD5 hashes
files <- ECOS_dl_08Dec2016$dest
md5s <- mclapply(files,
species_page_md5,
mc.cores = NCORE,
mc.preschedule = FALSE)
ECOS_dl_08Dec2016$MD5 <- unlist(md5s)
save(ECOS_dl_08Dec2016,
file = file.path(BASED, "rda",
paste0("ECOS_dl_", Sys.Date(), ".rda")))
# Links on each page
sp_links <- mclapply(files,
get_species_links,
mc.cores = NCORE,
mc.preschedule = FALSE)
ECOS_species_links <- bind_rows(sp_links)
save(ECOS_species_links,
file = file.path(BASED, "rda", "ECOS_species_links.rda"))
# Tables on each page
tabs <- mclapply(files,
get_species_tables,
mc.cores = NCORE,
mc.preschedule = FALSE)
tab_names <- map(1:length(tabs), function(x) names(tabs[[x]])) %>%
unlist() %>% unique()
names(tabs) <- c(as.character(seq(1, length(tabs))))
species_table <- bind_tables(tabs, "SP_TAB")
fedreg_table <- bind_tables(tabs, "FR_TAB")
recovery_table <- bind_tables(tabs, "REC_TAB")
adddoc_table <- bind_tables(tabs, "DOC_TAB")
fiveyr_table <- bind_tables(tabs, "REV_TAB")
crithab_table <- bind_tables(tabs, "CH_TAB")
HCP_table <- bind_tables(tabs, "HCP Plan Summaries")
SHA_table <- bind_tables(tabs, "SHA Plan Summaries")
CCA_table <- bind_tables(tabs, "CCA Plan Summaries")
CCAA_table <- bind_tables(tabs, "CCAA Plan Summaries")
# Petitions tables
TSN <- unlist(lapply(files, get_species_tsn))
petitions_table <- lapply(TSN, get_petitions_table)
names(petitions_table) <- ECOS_dl_08Dec2016$species
petitions_table <- bind_rows(petitions_table)
save(petitions_table,
file = file.path(BASED, "rda",
paste0("petitions_table_", Sys.Date(), ".rda")))
# County occurrence
co_urls <- filter(ECOS_species_links,
grepl(ECOS_species_links$link, pattern = "countiesBySpecies"))
counties_tabs <- mcmapply(get_counties,
co_urls$link, co_urls$Scientific_Name,
SIMPLIFY = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
counties_table <- bind_rows(counties_tabs)
save(counties_table,
file = file.path(BASED, "rda",
paste0("counties_table_", Sys.Date(), ".rda")))
# Conservation agreements data and links to files
HCP_url <- HCP_table$Doc_Link
HCP_spp <- HCP_table$Species
HCP_data <- mcmapply(get_conservation_plan_data,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_data <- bind_rows(HCP_data)
save(HCP_data,
file = file.path(BASED, "rda",
paste0("HCP_data_", Sys.Date(), ".rda")))
HCP_docs <- mcmapply(get_conservation_plan_doc_links,
HCP_url, HCP_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
HCP_docs <- bind_rows(HCP_docs)
save(HCP_docs,
file = file.path(BASED, "rda",
paste0("HCP_docs_", Sys.Date(), ".rda")))
SHA_url <- SHA_table$Doc_Link
SHA_spp <- SHA_table$Species
SHA_data <- mcmapply(get_conservation_plan_data,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_data <- bind_rows(SHA_data)
save(SHA_data,
file = file.path(BASED, "rda",
paste0("SHA_data_", Sys.Date(), ".rda")))
SHA_docs <- mcmapply(get_conservation_plan_doc_links,
SHA_url, SHA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
SHA_docs <- bind_rows(SHA_docs)
save(SHA_docs,
file = file.path(BASED, "rda",
paste0("SHA_docs_", Sys.Date(), ".rda")))
CCA_url <- CCA_table$Doc_Link
CCA_spp <- CCA_table$Species
CCA_data <- mcmapply(get_conservation_plan_data,
CCA_url, CCA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCA_data <- bind_rows(CCA_data)
save(CCA_data,
file = file.path(BASED, "rda",
paste0("CCA_data_", Sys.Date(), ".rda")))
CCA_docs <- mcmapply(get_conservation_plan_doc_links,
CCA_url, CCA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCA_docs <- bind_rows(CCA_docs)
save(CCA_docs,
file = file.path(BASED, "rda",
paste0("CCA_docs_", Sys.Date(), ".rda")))
CCAA_url <- CCAA_table$Doc_Link
CCAA_spp <- CCAA_table$Species
CCAA_data <- mcmapply(get_conservation_plan_data,
CCAA_url, CCAA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCAA_data <- bind_rows(CCAA_data)
save(CCAA_data,
file = file.path(BASED, "rda",
paste0("CCAA_data_", Sys.Date(), ".rda")))
CCAA_docs <- mcmapply(get_conservation_plan_doc_links,
CCAA_url, CCAA_spp,
SIMPLIFY = FALSE,
USE.NAMES = FALSE,
mc.cores = NCORE,
mc.preschedule = FALSE)
CCAA_docs <- bind_rows(CCAA_docs)
save(CCAA_docs,
file = file.path(BASED, "rda",
paste0("CCAA_docs_", Sys.Date(), ".rda")))
Sys.time() - starttime
save(TECP_table,
file = file.path(BASED, "rda", paste0("TECP_table_", Sys.Date(), ".rda")))
save(TECP_summary,
file = file.path(BASED, "rda", paste0("TECP_summary_", Sys.Date(), ".rda")))
save(ECOS_species_links,
file = file.path(BASED, "rda",
paste0("ECOS_species_links_", Sys.Date(), ".rda")))
quote(HCP_table)
paste(quote(HCP_table), "HERE")
quote(i)
all_tables <- c(species_table, fedreg_table, recovery_table,
adddoc_table, fiveyr_table, crithab_table,
HCP_table, SHA_table, CCA_table, CCAA_table)
for(i in all_tables) {
quote(i)
# save(i, file = file.path(BASED, "rda", quote(i)))
}
for(i in all_tables) {
print(quote(i))
# save(i, file = file.path(BASED, "rda", quote(i)))
}
for(i in all_tables) {
print(unquote(i))
# save(i, file = file.path(BASED, "rda", quote(i)))
}
?quote
print(enquote(i))
i
all_tables <- c(species_table, fedreg_table, recovery_table,
adddoc_table, fiveyr_table, crithab_table,
HCP_table, SHA_table, CCA_table, CCAA_table)
head(species_table)
for(i in all_tables) {
print(enquote(i))
# save(i, file = file.path(BASED, "rda", quote(i)))
}
i
all_tables
names(all_tables)
names(all_tables)
all_tables <- list(species_table, fedreg_table, recovery_table,
adddoc_table, fiveyr_table, crithab_table,
HCP_table, SHA_table, CCA_table, CCAA_table)
names(all_tables)
?save
save(species_table, fedreg_table, recovery_table,
adddoc_table, fiveyr_table, crithab_table,
HCP_table, SHA_table, CCA_table, CCAA_table,
file = file.path(BASED, "rda",
paste0("ECOS_species_tables_", Sys.Date(), ".rda")))
save(HCP_data, HCP_docs, SHA_data, SHA_docs, CCA_data, CCA_docs,
CCAA_data, CCAA_docs,
file = file.path(BASED, "rda",
paste0("conservation_agmt_data_", Sys.Date(), ".rda")))
Gqa("The initialization script, not Rmd, is working.")
library(gitr)_
library(gitr)
Gqa("The initialization script, not Rmd, is working.")
Gpush()
library(devtools)
document()
document()
Gqa("Remove get_species_baseline, unused.")
Gpush()
library(ecosdata)
data("TECP_table")
length(unique(TECP_table$Species_Code))
petitions_table <- bind_rows(petitions_table)
library(raster)
library(stringr)
library(maptools)
library(png)
georef_img <- function(js, map_file, outdir){
name <- str_replace(js[[4]], pattern = "[^[:alnum:]]", replacement = "")%>%
str_replace(pattern = " ", replacement = "_")
coords <- (str_replace(js[[8]][1], pattern = "\\(\\(", replacement = "")%>%
str_replace(pattern = "\\)\\)", replacement = "")%>%
str_replace(pattern = "POLYGON", replacement = "")%>%
str_split(pattern = ","))[[1]][c(2,4)]
TL_lon <- as.numeric(str_split(coords[1], pattern = " ")[[1]][1])
TL_lat <- as.numeric(str_split(coords[1], pattern = " ")[[1]][2])
BR_lon <- as.numeric(str_split(coords[2], pattern = " ")[[1]][1])
BR_lat <- as.numeric(str_split(coords[2], pattern = " ")[[1]][2])
img <- readPNG(map_file)
rast <- brick(img)
extent(rast) <- c(TL_lon, BR_lon, BR_lat, TL_lat)
projection(rast) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
#writeRaster(rast, "C:/Users/mevans/Desktop/myotis_sodalis", format = "GTiff")
writeRaster(rast, paste(outdir, name, sep="/"), format = "GTiff")
rasterToPolygons(rast, na.rm = TRUE)%>%
writeShapeSpatial(name, outdir)
}
georef_img("~/Downloads/INBA_occ_data.rda", "~/Downloads/")
load("~/Downloads/INBA_occ_data.rda")
georef_img(INBA_occ_data, "~/Downloads/INBA_range.png", "~/Downloads")
library(maptools)
georef_img <- function(js, map_file, outdir){
name <- str_replace(js[[4]], pattern = "[^[:alnum:]]", replacement = "")%>%
str_replace(pattern = " ", replacement = "_")
coords <- (str_replace(js[[8]][1], pattern = "\\(\\(", replacement = "")%>%
str_replace(pattern = "\\)\\)", replacement = "")%>%
str_replace(pattern = "POLYGON", replacement = "")%>%
str_split(pattern = ","))[[1]][c(2,4)]
TL_lon <- as.numeric(str_split(coords[1], pattern = " ")[[1]][1])
TL_lat <- as.numeric(str_split(coords[1], pattern = " ")[[1]][2])
BR_lon <- as.numeric(str_split(coords[2], pattern = " ")[[1]][1])
BR_lat <- as.numeric(str_split(coords[2], pattern = " ")[[1]][2])
img <- readPNG(map_file)
rast <- brick(img)
extent(rast) <- c(TL_lon, BR_lon, BR_lat, TL_lat)
projection(rast) <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
#writeRaster(rast, "C:/Users/mevans/Desktop/myotis_sodalis", format = "GTiff")
writeRaster(rast, paste(outdir, name, sep="/"), format = "GTiff")
rasterToPolygons(rast, na.rm = TRUE)%>%
writeSpatialShape(name, outdir)
}
georef_img(INBA_occ_data, "~/Downloads/INBA_range.png", "~/Downloads")
georef_img(INBA_occ_data, "~/Downloads/INBA_range.png", "~/Downloads")
document()
document()
library(ecosdata)
Gstatus()
Gqa("Finalize the initialize script, add function for file MD5s.")
Gpush()
rm(list = ls())
